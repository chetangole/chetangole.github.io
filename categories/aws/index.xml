<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom" xmlns:content="http://purl.org/rss/1.0/modules/content/">
  <channel>
    <title>AWS on Chetan Gole</title>
    <link>https://chetangole.com/categories/aws/</link>
    <description>Recent content in AWS on Chetan Gole</description>
    <image>
      <url>https://chetangole.com/%3Clink%20or%20path%20of%20image%20for%20opengraph,%20twitter-cards%3E</url>
      <link>https://chetangole.com/%3Clink%20or%20path%20of%20image%20for%20opengraph,%20twitter-cards%3E</link>
    </image>
    <generator>Hugo -- gohugo.io</generator><atom:link href="https://chetangole.com/categories/aws/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>AWS Lambda, Cold Start and Java Optimizations</title>
      <link>https://chetangole.com/blog/java-aws-lambda-cold-start/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://chetangole.com/blog/java-aws-lambda-cold-start/</guid>
      <description>Keep them warm!  Use provisioned concurrency – AWS feature. Use Periodic ping e.g., health checks!   Load as much as you can/need during runtime bootstrap since you get boosted CPU access during that time but mind the 10 second limit Keep JAR size as small as possible, avoid including unnecessary jars and classes. Use libraries which are optimized for serverless for example micronaut.io, Spring Cloud Function. Avoid reflection.</description>
    </item>
    
    <item>
      <title>Cost Effective Test Automation for AWS Lambda based Serverless Projects</title>
      <link>https://chetangole.com/blog/cost-effective-test-automation-for-aws-lambda/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://chetangole.com/blog/cost-effective-test-automation-for-aws-lambda/</guid>
      <description>You can invoke your function locally by using the sam local invoke command and providing its function logical ID and an event file.
https://docs.aws.amazon.com/serverless-application-model/latest/developerguide/serverless-sam-cli-using-invoke.html</description>
    </item>
    
    <item>
      <title>Points to consider when using AWS Lambda</title>
      <link>https://chetangole.com/blog/points-to-consider-when-using-aws-lambda/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://chetangole.com/blog/points-to-consider-when-using-aws-lambda/</guid>
      <description>Cold Start Burst Limitations – concurrency (next slide) Time, Memory and CPU limitations  Only time and memory is configurable. AWS Allocates other resources like CPU, networking throughput based on selected memory configuration.   Temp storage limitations – 512 MB (If need be, we can mount AWS Elastic File System) Not recommended to use libraries like Spring, mkt-shared etc. No APIs for IoC, Localization, interaction with config service, and so on.</description>
    </item>
    
  </channel>
</rss>
