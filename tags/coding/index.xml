<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom" xmlns:content="http://purl.org/rss/1.0/modules/content/">
  <channel>
    <title>Coding on Chetan Gole</title>
    <link>https://chetangole.com/tags/coding/</link>
    <description>Recent content in Coding on Chetan Gole</description>
    <image>
      <url>https://chetangole.com/%3Clink%20or%20path%20of%20image%20for%20opengraph,%20twitter-cards%3E</url>
      <link>https://chetangole.com/%3Clink%20or%20path%20of%20image%20for%20opengraph,%20twitter-cards%3E</link>
    </image>
    <generator>Hugo -- gohugo.io</generator><atom:link href="https://chetangole.com/tags/coding/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>AWS Lambda, Cold Start and Java Optimizations</title>
      <link>https://chetangole.com/blog/java-aws-lambda-cold-start/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://chetangole.com/blog/java-aws-lambda-cold-start/</guid>
      <description>In one of my recent project I got an opportunity to work on a Java based Lambda function. Here I am sharing few tips to reduce the cost and solution to the common AWS Lambda problems like Cold start.
 Keep them warm!  Use provisioned concurrency – AWS feature. Use Periodic ping e.g., health checks!   Load as much as you can/need during runtime bootstrap since you get boosted CPU access during that time but mind the 10 second limit Keep JAR size as small as possible, avoid including unnecessary jars and classes.</description>
    </item>
    
    <item>
      <title>Change Current Java Version in Windows 10 in one click - using a batch file</title>
      <link>https://chetangole.com/blog/change-current-java-version-in-window-using-command/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://chetangole.com/blog/change-current-java-version-in-window-using-command/</guid>
      <description>In the world of microservices, we work on different versions of Java in different microservices. It takes some effort to open the Windows configuration screen to change the Java version and run your builds. Manually doing it once in a while is ok, but what if you want to do it when you have a production defect in hand?
I found an opportunity to automate this. So I created this simple batch file to change the Java version with one click.</description>
    </item>
    
    <item>
      <title>Cost Effective Test Automation for AWS Lambda based Serverless Projects</title>
      <link>https://chetangole.com/blog/cost-effective-test-automation-for-aws-lambda/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://chetangole.com/blog/cost-effective-test-automation-for-aws-lambda/</guid>
      <description>You can invoke your Lambda function locally by using the sam local invoke command and providing its function logical ID and an event file. We have built a framework using AWS SAM SDK and Pytest to test our Lambda functions before every production deployment. The tests are run inside the Jenkins server itself. No dependency on real AWS account.
Read more here: https://docs.aws.amazon.com/serverless-application-model/latest/developerguide/serverless-sam-cli-using-invoke.html
I&amp;rsquo;ll update the post with more information very soon.</description>
    </item>
    
    <item>
      <title>How Datadog Agent Works</title>
      <link>https://chetangole.com/blog/how-datadog-agent-works-java-agents/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://chetangole.com/blog/how-datadog-agent-works-java-agents/</guid>
      <description>I am sure, you must be aware of Datadog. Datadog is infrastructure monitoring as a service. Read more here: datadog.com
Ever wondered how Datadog agent works? We use Datadog in SAS CI360 to monitor our infrastructure. It provides quite a lot of features like APN, distributed tracing, etc.
But, how Datadog knows all the information about your service without adding any code to our microservices? We need to include a Datadog agent in our JVM startup.</description>
    </item>
    
    <item>
      <title>Points to consider when using AWS Lambda</title>
      <link>https://chetangole.com/blog/points-to-consider-when-using-aws-lambda/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://chetangole.com/blog/points-to-consider-when-using-aws-lambda/</guid>
      <description>Cold Start AWS Lambda: Burst Limitations – concurrency. Time, Memory and CPU limitations  Only time and memory is configurable. AWS Allocates other resources like CPU, networking throughput based on selected memory configuration.   Temp storage limitations – 512 MB (If need be, we can mount AWS Elastic File System) Not recommended to use libraries like Spring, Hibernate, etc. No APIs for IoC, Localization, interaction with shared services, and so on.</description>
    </item>
    
    <item>
      <title>To be, or not to be: Code Comments</title>
      <link>https://chetangole.com/blog/code-comment-or-no-comment/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://chetangole.com/blog/code-comment-or-no-comment/</guid>
      <description>I believe in writing code such a way that, you don&amp;rsquo;t need to provide the documentation with your source code to understand how it works. Naming the functions, variables and even logs can help understand the source code flow instead of writing long confusing comments. However sometimes the comments also help.
There are a lot of good discussions around whether we should add comments in our code or not. Please go through below links to read more:</description>
    </item>
    
  </channel>
</rss>
